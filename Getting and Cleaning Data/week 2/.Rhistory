x <- 1:20
x
x <- 1:20
x
x <- 1:20
x
x <- 1:20
x
x <- 1:20
x
Y <- 1/0
Y
Y <- 1/0
Y
Y <- 1/0
Y
z <- c(1,3)
z
Y <- 1/0
Y
z <- c(1,"d")
z
sleep
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
install.packages("RMySQL", type="source")
install.packages("RMySQL")
library("RMySQL")
ucscDb <- dbConnect(MySQL(), user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(h19, "select count(*) from affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
allTables <- dbListTables(hg19)
length(allTables)
allTables[1:5]
dbListFields(hg19, "affyU133Plus2")
dbGetQuery(hg19, "select count(*) from affyU133Plus2")
affyData <- dbReadTable(hg19, "affyU133Plus2")
head(affyData)
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
hg19 <- dbConnect(MySQL(), user="genome", db="hg19", host="genome-mysql.cse.ucsc.edu")
query <- dbSendQuery(hg19, "select * from affyU133Plus2 where misMatches between 1 and 3")
affyMis <- fetch(query)
affyMis
quantile(affyMis$misMatches)
library(httr)
install.packages(httr)
install.packages("httr")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
myapp
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
install.packages("httpuv")
library(httr)
library(httpuv)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache =FALSE)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache =FALSE)
req <- with_config(gtoken, GET("https://api.github.com/rate_limit"))
stop_for_status(req)
content(req)
oauth_endpoints("github")
myapp <- oauth_app("github",
key = "471a6f3496a5097c3ca5",
secret = "b91cccebed7a3674d577a32a1cbfec008a521e92")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp, cache =FALSE)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/rate_limit", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
df <- content(req)
df[30]
df[30]
df[[30]]
df
df[["git_tags_url"]]
df[[git_tags_url]]
df[[30]]
class(df)
length(df)
grep("created", df)
lapply(df, function(ch) grep("created", ch))
grep("created", df[[1]])
df[[1]]
df[[1]][["id"]]
df[[1]][["created"]]
df[[1]][["created_at"]]
df[[2]][["created_at"]]
df[[3]][["created_at"]]
df[[3]][["name"]]
df$name
df[["df$name"]]
install.packages("sqldf")
library(sqldf)
setwd("C:/Work/Training/datasciencecoursera/Getting and Cleaning Data/week 1")
dat = read.csv("getdata_data_ss06pid.csv", header = TRUE)
library(sqldf)
setwd("C:/Work/Training/datasciencecoursera/Getting and Cleaning Data/week 1")
acs = read.csv("getdata_data_ss06pid.csv", header = TRUE)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs")
options(sqldf.driver = "SQLite")
options(gsubfn.engine = "R")
library(sqldf)
library(RMySQL)
setwd("C:/Work/Training/datasciencecoursera/Getting and Cleaning Data/week 1")
acs = read.csv("getdata_data_ss06pid.csv", header = TRUE)
sqldf("select * from acs where AGEP < 50 and pwgtp1")
sqldf("select pwgtp1 from acs")
sqldf("select * from acs where AGEP < 50")
sqldf("select pwgtp1 from acs where AGEP < 50")
unique(acs$AGEP)
sqldf("select unique * from acs")
sqldf("select distinct AGEP from acs")
sqldf("select unique AGEP from acs")
sqldf("select AGEP where unique from acs")
install.packages("httr")
library(httr)
url <- " http://biostat.jhsph.edu/~jleek/contact.html"
html2 = GET (url)
content2 = content(html2, as="text")
parsedHTML = htmlParse(content2, asText=TRUE)
library(httr)
url <- " http://biostat.jhsph.edu/~jleek/contact.html"
html2 = GET (url)
content2 = content(html2, as="text")
parsedHTML = htmlParse(content2, asText=TRUE)
library(httr)
library(XML)
url <- " http://biostat.jhsph.edu/~jleek/contact.html"
html2 = GET (url)
content2 = content(html2, as="text")
parsedHTML = htmlParse(content2, asText=TRUE)
html2 = GET(url)
install.packages("RCurl")
library(httr)
library(XML)
library(RCurl)
url <- " http://biostat.jhsph.edu/~jleek/contact.html"
webpage <- getURL(url)
library(httr)
library(XML)
library(RCurl)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
webpage <- getURL(url)
url <- "http://biostat.jhsph.edu/~jleek/contact.html"
html2 = GET(url)
Rcontent2 = content(html2, as="text")
parsedHTML = htmlParse(content2, asText=TRUE)
content2 = content(html2, as="text")
parsedHTML = htmlParse(content2, asText=TRUE)
parsedHTML
class(parsedHTML)
htmlcode = readLines(parsedHTML)
class(htmlcode)
htmlcode = readLines(url)
class(htmlcode)
htmlcode
htmlcode[[1]]
htmlcode[[10]]
nchars(htmlcode[[10]])
nchar(htmlcode[[10]])
nchar(htmlcode[[20]])
nchar(htmlcode[[30]])
nchar(htmlcode[[100]])
??whatever
?whatever
?whatever for
??whatever for
?read.fwf
setwd("C:/Work/Training/datasciencecoursera/Getting and Cleaning Data/week 1")
dat = read.csv("getdata_wksst8110.csv", header = TRUE)
summary( dat)
setwd("C:/Work/Training/datasciencecoursera/Getting and Cleaning Data/week 2")
dat = read.csv("getdata_wksst8110.csv", header = TRUE)
summary( dat)
sum(dat$Nino3.SST)
